// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // provider = "prisma-erd-generator"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  lastname String
  avatar   String?

  address   Address?
  birthdate DateTime?

  cretedGroups   ChatChannel[]    @relation("creator")
  chatChannels   ChatChannel[]    @relation(fields: [chatChannelIDs], references: [id])
  chatChannelIDs String[]         @db.ObjectId
  attatchments   Attatchment[]
  posts          Post[]           @relation("author")
  preferences    userPreferences?
  Comment        Comment[]

  interest      SubCategory[] @relation(fields: [interestIDs], references: [id])
  interestIDs   String[]      @db.ObjectId
  course        Category?     @relation(fields: [courseId], references: [id])
  courseId      String?       @db.ObjectId
  degree        String
  followedBy    User[]        @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[]      @db.ObjectId
  following     User[]        @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[]      @db.ObjectId

  MessageSent   Message[] @relation("Sender")
  MessageRecive Message[] @relation("PrivateMessage")
  login         Login?

  chats   chat[]   @relation(fields: [chatIDs], references: [id])
  chatIDs String[] @db.ObjectId

  createdAt DateTime @default(now())
}

model Login {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String  @unique
  email    String  @unique
  phone    String? @unique
  password String
  role     Role    @default(USER)
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}

enum Role {
  USER
  ADMIN
}

model userPreferences {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  emailUpdates Boolean @default(true)
  phoneUpdates Boolean @default(true)
  userId       String  @unique @db.ObjectId
  user         User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model chat {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?

  members   User[]   @relation(fields: [userIDs], references: [id])
  userIDs String[] @db.ObjectId

  messages      Message[]
  chatChannel   ChatChannel? @relation(fields: [chatChannelId], references: [id])
  chatChannelId String?      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])
  postId   String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  published Boolean @default(false)

  authorId       String        @db.ObjectId
  author         User?         @relation("author", fields: [authorId], references: [id])
  attatchments   Attatchment[]
  categoryIDs    String[]      @db.ObjectId
  categories     Category[]    @relation(fields: [categoryIDs], references: [id])
  subCategory    SubCategory[] @relation(fields: [subCategoryIDs], references: [id])
  subCategoryIDs String[]      @db.ObjectId

  userId String[] @db.ObjectId

  Comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  sigle String @unique

  postIDs           String[]      @db.ObjectId
  CategoriesOnPosts Post[]        @relation(fields: [postIDs], references: [id])
  user              User[]
  subCategories     SubCategory[]
  chatChannel       ChatChannel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  sigle String

  userId            String[]      @db.ObjectId
  user              User[]        @relation(fields: [userId], references: [id])
  postIDs           String[]      @db.ObjectId
  CategoriesOnPosts Post[]        @relation(fields: [postIDs], references: [id])
  categoryIDs       String        @db.ObjectId
  category          Category      @relation(fields: [categoryIDs], references: [id])
  chatChannel       ChatChannel[] @relation(fields: [chatChannelIDs], references: [id])
  chatChannelIDs    String[]      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatChannel {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  avatar      String?
  private     Boolean @default(false)

  members         User[]        @relation(fields: [userId], references: [id])
  userId          String[]      @db.ObjectId
  subcategories   SubCategory[] @relation(fields: [subcategoriesId], references: [id])
  subcategoriesId String[]      @db.ObjectId
  category        Category?     @relation(fields: [categoryId], references: [id])
  categoryId      String?       @db.ObjectId

  creator   User?   @relation("creator", fields: [creatorId], references: [id])
  creatorId String? @db.ObjectId
  chat      chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attatchment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  data    Blob[]
  Post    Post?   @relation(fields: [postId], references: [id])
  postId  String? @db.ObjectId
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
  private Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blob {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  data          String       @unique
  Attatchment   Attatchment? @relation(fields: [attatchmentId], references: [id])
  attatchmentId String?      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  sender   User   @relation("Sender", fields: [senderId], references: [id])
  senderId String @db.ObjectId

  receiver   User?   @relation("PrivateMessage", fields: [receiverId], references: [id])
  receiverId String? @db.ObjectId

  chat   chat?   @relation(fields: [chatId], references: [id])
  chatId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  online
  offline
}
