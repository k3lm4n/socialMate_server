// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String    @unique
  password  String
  address   Address?
  birthdate DateTime?
  role      Role      @default(USER)

  cretedGroups Group[]          @relation("creator")
  groups       Group[]
  attatchments Attatchment[]
  posts        Post[]           @relation("author")
  preferences  userPreferences?
  Comment      Comment[]
  contacts     Contact[]

  createdAt DateTime @default(now())
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}

enum Role {
  USER
  ADMIN
}

model userPreferences {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  emailUpdates Boolean
  phoneUpdates Boolean
  userId       String  @unique @db.ObjectId
  user         User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])
  postId   String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  published Boolean @default(false)

  authorId     String        @db.ObjectId
  author       User?         @relation("author", fields: [authorId], references: [id])
  attatchments Attatchment[]
  categoryIDs  String[]      @db.ObjectId
  categories   Category[]    @relation(fields: [categoryIDs], references: [id])
  userId       String[]      @db.ObjectId
  Comment      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  postIDs           String[] @db.ObjectId
  CategoriesOnPosts Post[]   @relation(fields: [postIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String

  User       User?    @relation(fields: [userId], references: [id])
  userId     String[] @db.ObjectId
  categories String[] @db.ObjectId
  creator    User     @relation("creator", fields: [creatorId], references: [id])
  creatorId  String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attatchment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  data    Blob[]
  Post    Post?   @relation(fields: [postId], references: [id])
  postId  String? @db.ObjectId
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
  private Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blob {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  data          String       @unique
  Attatchment   Attatchment? @relation(fields: [attatchmentId], references: [id])
  attatchmentId String?      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  participants Int[]
  messages     Message[]
  contacts     Contact[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  username       String @unique
  photo          String
  lastMessage    Json?
  unreadMessages Int    @default(0)
  status         Status @default(offline)

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  User           User?        @relation(fields: [userId], references: [id])
  userId         String?      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  from Int
  text String

  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  online
  offline
}
